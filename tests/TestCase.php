<?php

namespace Tests;

use App\Models\Role;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\TestCase as BaseTestCase;

abstract class TestCase extends BaseTestCase
{
    use CreatesApplication, RefreshDatabase;

    const HOST = 'http://127.0.0.1:8070';

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->seedData();
    }

    protected function seedData()
    {
        $this->seed('DatabaseSeeder');
    }

    protected function setUpUser($password = null)
    {
        $password = $password ? $password : 'password';
        $role = Role::factory()->create([
            'name' => \App\Enums\Role::CUSTOMER,
        ]);
        return User::factory()
                    ->for($role)
                    ->create(['password' => $password]);
    }

    protected function setUpAdminUser($password = null)
    {
        $password = $password ? $password : 'password';
        $role = Role::factory()->create([
            'name' => \App\Enums\Role::ADMIN,
        ]);
        return User::factory()
            ->for($role)
            ->create(['password' => $password]);
    }

    protected function setUpPhotographerUser($password = null)
    {
        $password = $password ? $password : 'password';
        $role = Role::factory()->create([
            'name' => \App\Enums\Role::PHOTOGRAPHER,
        ]);
        return User::factory()
            ->for($role)
            ->create(['password' => $password]);
    }

    protected function getXsrfTokes()
    {
        return $this->get("/sanctum/csrf-cookie");
    }

    protected function makePost($route, $data)
    {
        return $this->post($route, $data, ['Accept' => 'application/json']);
    }

    protected function makeGet($route)
    {
        return $this->post($route, ['Accept' => 'application/json']);
    }

    protected function makeAuthGet($route)
    {
        return $this->post($route, ['Accept' => 'application/json', 'Referrer' => self::HOST]);
    }

}
